<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/javascripts/usermanagment.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="shortcut icon" href="assets/images/favicon.ico" />
    <meta name="viewport" content=" width=" 1024", initial-scale=1, user-scalable=yes">

</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper">
            {{>sidebar}}
            <div class="main-panel">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-arrow-left" onclick="goBack()" title="Back"></i>
                                <script>
                                    function goBack() {
                                        window.history.back();
                                    }
                                </script>
                            </span> Manual Attendance Data
                        </h3>

                    </div>

                    <div class="row">
                        <div class="col-md-12 grid-margin stretch-card">
                            <div class="card">
                                <div class="col-md-12">
                                        <div class="col-md-12">
                                            <button class="btn btn-success mt-4 mx-5"
                                                style="float: right;padding:8px 21px">Done</button>
                                        </div>
                                    </div>
                                <div class="card-body">
                                    
                                    <div class="table-wrapper">
                                        <table id="userDataTable" class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th scope="col" class="text-center" hidden>Id</th>
                                                    <th scope="col" class="text-center">User Name</th>
                                                    <th scope="col" class="text-center" hidden>User ID</th>
                                                    <th scope="col" class="text-center" hidden>A Type</th>
                                                    <th scope="col" class="text-center" hidden>User Latitude</th>
                                                    <th scope="col" class="text-center" hidden>User Longitude</th>
                                                    <th scope="col" class="text-center">Date</th>
                                                    <th scope="col" class="text-center">Time</th>
                                                    <th scope="col" class="text-center" hidden>Range Status</th>
                                                    <th scope="col" class="text-center" hidden>User Email</th>
                                                    <th scope="col" class="text-center">Attendance Mark</th>
                                                    <th scope="col" class="text-center">
                                                        <label>
                                                            <input type="checkbox" class="approve-all-checkbox"> Approve
                                                        </label>
                                                    </th>
                                                    <th scope="col" class="text-center">
                                                        <label>
                                                            <input type="checkbox" class="reject-all-checkbox"> Reject
                                                        </label>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {{#each manualData}}
                                                <tr data-id="{{id}}">
                                                    <td class="text-center" hidden>{{id}}</td>
                                                    <td id="user_name" class="text-center">{{user_name}}</td>
                                                    <td id="user_id" class="text-center" hidden>{{user_id}}</td>
                                                    <td id="A_type" class="text-center" hidden>{{A_type}}</td>
                                                    <td id="user_lat" class="text-center" hidden>{{user_lat}}</td>
                                                    <td id="user_lon" class="text-center" hidden>{{user_lon}}</td>
                                                    <td id="date_column" class="text-center">{{capitalizeFirst
                                                        formatted_date}}</td>
                                                    <td id="time_column" class="text-center">{{time_column}}</td>
                                                    <td id="range_status" class="text-center" hidden>{{range_status}}
                                                    </td>
                                                    <td id="user_email" class="text-center" hidden>{{user_email}}</td>
                                                    <td id="attendance_mark" class="text-center">{{attendance_mark}}
                                                    </td>
                                                    <td class="text-center" style="padding: inherit;">
                                                        <input type="checkbox" class="approve-checkbox"
                                                            id="approve_{{id}}">
                                                    </td>
                                                    <td class="text-center" style="padding: inherit;">
                                                        <input type="checkbox" class="reject-checkbox"
                                                            id="reject_{{id}}">
                                                    </td>
                                                </tr>
                                                {{/each}}
                                            </tbody>
                                        </table>
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <script src="assets/vendors/js/vendor.bundle.base.js"></script>
        <script src="assets/vendors/chart.js/Chart.min.js"></script>
        <script src="assets/js/jquery.cookie.js" type="text/javascript"></script>
        <script src="assets/js/off-canvas.js"></script>
        <script src="assets/js/hoverable-collapse.js"></script>
        <script src="assets/js/misc.js"></script>
        <script src="assets/js/dashboard.js"></script>
        <script src="assets/js/todolist.js"></script>
</body>

</html>
<style>
    .table thead th {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 2;
    }

    .table-wrapper {
        max-height: 500px;
        overflow-y: auto;
    }
</style>

<script>
    // Function to filter the table rows based on the search input
    function filterTable() {
        var input = document.getElementById("searchInput");
        var filter = input.value.toLowerCase();
        var table = document.getElementById("userDataTable");
        var rows = table.getElementsByTagName("tr");

        for (var i = 1; i < rows.length; i++) { // Start from 1 to skip the table header row
            var name = rows[i].getElementsByTagName("td")[1].textContent.toLowerCase();
            if (name.includes(filter)) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }
        }
    }

    // Add an event listener to the search input for the "input" event
    document.getElementById("searchInput").addEventListener("input", filterTable);
</script>
{{!--
<script>
    function approveAttendance(id) {
        const tableRow = document.querySelector(`#userDataTable tr[data-id="${id}"]`);
        const user_id = tableRow.querySelector("#user_id").textContent;
        const user_name = tableRow.querySelector("#user_name").textContent;
        const user_email = tableRow.querySelector("#user_email").textContent;
        const date = tableRow.querySelector("#date_column").textContent;
        const time = tableRow.querySelector("#time_column").textContent;
        const A_type = tableRow.querySelector("#A_type").textContent;
        const userLat = tableRow.querySelector("#user_lat").textContent;
        const userLon = tableRow.querySelector("#user_lon").textContent;
        const attendanceMark = tableRow.querySelector("#attendance_mark").textContent;
        const rangeStatus = tableRow.querySelector("#range_status").textContent;

        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to approve this attendance record.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Approve',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/approveAttendance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id,
                        user_id,
                        user_name,
                        user_email,
                        date,
                        time,
                        A_type,
                        userLat,
                        userLon,
                        attendanceMark,
                        rangeStatus
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Approved!', 'Attendance has been approved.', 'success');
                            location.reload();
                        } else {
                            Swal.fire('Error', data.error, 'error');
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        Swal.fire('Error', 'An error occurred while processing your request.', 'error');
                    });
            }
        });
    }

</script> --}}


{{!--
<script>
    function rejectAttendance(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to reject this attendance record.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Reject',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/rejectAttendance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: id })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Rejected!', 'Attendance has been rejected.', 'success');
                            location.reload();

                        } else {
                            Swal.fire('Error', data.error, 'error');
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        Swal.fire('Error', 'An error occurred while processing your request.', 'error');
                    });
            }
        });
    }
</script> --}}
<script>

    function setCurrentMonthAndDate() {
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');

        const firstDay = new Date(year, currentDate.getMonth(), 1);
        const firstDayFormatted = `${year}-${month}-01`;

        const lastDay = new Date(year, currentDate.getMonth() + 1, 0);
        const lastDayFormatted = `${year}-${month}-${lastDay.getDate().toString().padStart(2, '0')}`;

        const currentMonthYear = `${year}-${month}`;
        document.getElementById('calendarInput').value = currentMonthYear;
        document.getElementById('startDate').value = firstDayFormatted;
        document.getElementById('endDate').value = lastDayFormatted;

        filterData1();
        filterData2(); // Call the updated filterData2
    }

    window.onload = function () {
        setCurrentMonthAndDate();
        filterData2(); // Call the updated filterData2 on page load
    };

    document.getElementById('calendarInput').addEventListener('change', function () {
        const selectedDate = new Date(this.value);
        const year = selectedDate.getFullYear();
        const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
        const firstDay = new Date(year, selectedDate.getMonth(), 1);
        const firstDayFormatted = `${year}-${month}-01`;
        const lastDay = new Date(year, selectedDate.getMonth() + 1, 0);
        const lastDayFormatted = `${year}-${month}-${lastDay.getDate().toString().padStart(2, '0')}`;

        document.getElementById('startDate').value = firstDayFormatted;
        document.getElementById('endDate').value = lastDayFormatted;
        filterData1();
        filterData2(); // Call the updated filterData2 when the calendar input changes
    });

    function filterData1() {
        const startDateString = document.getElementById('startDate').value;
        const endDateString = document.getElementById('endDate').value;

        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);

        const rows = document.querySelectorAll('#userDataTable tbody tr');

        rows.forEach(row => {
            const dateCell = row.querySelector('#date_column').textContent;
            const rowDate = new Date(dateCell);

            if (rowDate >= startDate && rowDate <= endDate) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function filterData2() {
        const selectedUserName = document.getElementById('userNameFilter').value;
        const selectedMonthYear = document.getElementById('calendarInput').value;

        const rows = document.querySelectorAll('#userDataTable tbody tr');

        rows.forEach(row => {
            const userName = row.querySelector('#user_name').textContent;
            const dateCell = row.querySelector('#date_column').textContent;

            if (
                (selectedUserName === "" || userName === selectedUserName) &&
                (selectedMonthYear === "" || dateCell.startsWith(selectedMonthYear))
            ) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }


</script>
<script>
    let previousMonth = null; // Store the previous month

    document.getElementById('calendarInput').addEventListener('input', function () {
        const selectedDate = new Date(this.value);
        const year = selectedDate.getFullYear();
        const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
        const currentMonth = ${ year }-${ month };

        if (currentMonth !== previousMonth) {
            // The month has changed
            previousMonth = currentMonth;
            // Call the function to update the data
            filterData2();
        }
    });
</script>

<script>
    $(document).ready(function () {
        // Individual checkboxes in the "Approve" column
        $('.approve-checkbox').change(function () {
            if ($(this).prop('checked')) {
                // Uncheck the corresponding "Reject" checkbox
                $(this).closest('tr').find('.reject-checkbox').prop('checked', false);
            }
            updateApproveAllCheckbox();
        });

        // "Select All" checkbox in the "Approve" column
        $('.approve-all-checkbox').change(function () {
            $('.approve-checkbox').prop('checked', $(this).prop('checked'));
            // Uncheck all "Reject" checkboxes
            $('.reject-checkbox').prop('checked', false);
        });

        // Individual checkboxes in the "Reject" column
        $('.reject-checkbox').change(function () {
            if ($(this).prop('checked')) {
                // Uncheck the corresponding "Approve" checkbox
                $(this).closest('tr').find('.approve-checkbox').prop('checked', false);
            }
            updateRejectAllCheckbox();
        });

        // "Select All" checkbox in the "Reject" column
        $('.reject-all-checkbox').change(function () {
            $('.reject-checkbox').prop('checked', $(this).prop('checked'));
            // Uncheck all "Approve" checkboxes
            $('.approve-checkbox').prop('checked', false);
        });

        // "Done" button click event
        $('.btn-success').click(function () {
            // Use SweetAlert to confirm before submitting data
            Swal.fire({
                title: 'Are you sure?',
                text: 'You want to submit the data.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, submit it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    submitData();
                }
            });
        });

        // Function to submit data
        function submitData() {
            var approveIds = [];
            var rejectIds = [];

            // Loop through each row in the table
            $('tbody tr').each(function () {
                var id = $(this).data('id');

                // Check if the "Approve" checkbox is checked
                if ($(this).find('.approve-checkbox').prop('checked')) {
                    approveIds.push(id);
                }

                // Check if the "Reject" checkbox is checked
                if ($(this).find('.reject-checkbox').prop('checked')) {
                    rejectIds.push(id);
                }
            });

            // Call the backend to approve attendance for selected IDs
            if (approveIds.length > 0) {
                approveAttendance(approveIds);
            }

            // Call the backend to reject attendance for selected IDs
            if (rejectIds.length > 0) {
                rejectAttendance(rejectIds);
            }
        }
        // Function to approve attendance for selected IDs
        function approveAttendance(ids, id, user_id, user_name, user_email, date, time, A_type, userLat, userLon, attendanceMark, rangeStatus) {
            $.ajax({
                type: 'POST',
                url: '/approveAttendance1',
                data: {
                    ids: ids,
                    additionalData: JSON.stringify({
                        id,
                        user_id,
                        user_name,
                        user_email,
                        date,
                        time,
                        A_type,
                        userLat,
                        userLon,
                        attendanceMark,
                        rangeStatus
                    })
                },
                success: function (response) {
                    // Handle success response
                    console.log(response);
                    location.reload();
                },
                error: function (error) {
                    // Handle error response
                    console.error(error);
                }
            });
        }



        // Function to reject attendance for selected IDs
        function rejectAttendance(ids) {
            $.ajax({
                type: 'POST',
                url: '/rejectAttendance1',
                data: { ids: ids },
                success: function (response) {
                    console.log(data);
                    // Handle success response
                    console.log(response);
                    location.reload();
                },
                error: function (error) {
                    // Handle error response
                    console.error(error);
                }
            });
        }

        function updateApproveAllCheckbox() {
            var allChecked = $('.approve-checkbox:checked').length === $('.approve-checkbox').length;
            $('.approve-all-checkbox').prop('checked', allChecked);
        }

        function updateRejectAllCheckbox() {
            var allChecked = $('.reject-checkbox:checked').length === $('.reject-checkbox').length;
            $('.reject-all-checkbox').prop('checked', allChecked);
        }
    });
</script>