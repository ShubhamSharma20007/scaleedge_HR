<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="stylesheets/usermanagment.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>

<body>
    <div class="container">
        <div class="navigation">
            {{> sidebar}}

        </div>

        <div class="main">
            {{> topbar}}

            <div style="display: -webkit-inline-box;">
                <div class="calendarBox">
                    <label for="calendarInput">Select Month and Year:</label>
                    <input type="month" id="calendarInput" onchange="filterData()" />
                </div>
                <div class="userSelectBox" style="margin: auto 27px;">
                    <label for="userSelect">Select User:</label>
                    <select id="userSelect" onchange="filterData()">
                        <option value="">All Users</option>
                        {{#each users}}
                        <option value="{{this.user_name}}">{{this.user_name}}</option>
                        {{/each}}
                    </select>
                </div>
            </div>

            <div class="details">
                <div class="recentOrders">
                    <div class="cardHeader">
                        <h2>User Working Hours Report</h2>
                    </div>
                    <div class="table-container">
                        <table id="userDataTable" class="table table-bordered">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">E-mail</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">In Time</th>
                                    <th scope="col">Out Time</th>
                                    <th scope="col">Working Hours</th>
                                </tr>
                            </thead>
                            <tbody id="userTableBody">
                                {{#each rows}}
                                <tr>
                                    <td scope="row">{{this.user_name}}</td>
                                    <td scope="row">{{this.email}}</td>
                                    <td>{{this.date_column}}</td>
                                    <td>{{this.time_in}}</td>
                                    <td>{{this.time_out}}</td>
                                    <td>{{this.hours_worked}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>

                </div>

            </div>
        </div>
    </div>

    <script>
        document.getElementById('calendarInput').addEventListener('change', filterData);

        function filterData() {

            const selectedMonthYear = document.getElementById('calendarInput').value;
            const selectedUser = document.getElementById('userSelect').value;
            const selectedDate = new Date(selectedMonthYear);
            const currentDate = new Date();

            const lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();

            const allDatesInMonth = Array.from({ length: lastDay }, (_, i) => i + 1);



            const rows = document.querySelectorAll('#userTableBody tr');

            rows.forEach(row => {
                const userName = row.cells[0].textContent;
                const dateCell = row.cells[2].textContent;
                const rowDate = new Date(dateCell);

                if ((selectedUser === "" || userName === selectedUser) &&
                    rowDate.getMonth() === selectedDate.getMonth() &&
                    rowDate.getFullYear() === selectedDate.getFullYear()) {
                    if (rowDate <= currentDate) {
                        row.style.display = 'table-row';
                    } else {
                        row.style.display = 'none';
                    }
                } else {
                    row.style.display = 'none';
                }
            });



            const tbody = document.getElementById('userTableBody');
            allDatesInMonth.forEach(date => {
                const dateString = selectedDate.getFullYear() + '-' + (selectedDate.getMonth() + 1).toString().padStart(2, '0') + '-' + date.toString().padStart(2, '0');
                const existingRow = Array.from(tbody.getElementsByTagName('tr')).find(row => row.cells[1].textContent === dateString);
                if (!existingRow && new Date(dateString) <= currentDate) {
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `
                    <td scope="row" style="display:none">N/A</td>
                    <td scope="row" style="display:none">N/A</td>
                    <td style="display:none">${dateString}</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                `;
                }
            });

            const usersInTable = new Set();
            rows.forEach(row => {
                const userName = row.cells[0].textContent;
                usersInTable.add(userName);
            });

            const usersNotInAttendance = [];
            usersInTable.forEach(userName => {
                const existingRowsForUser = Array.from(tbody.getElementsByTagName('tr')).filter(row => row.cells[0].textContent === userName);
                const datesInExistingRows = existingRowsForUser.map(row => row.cells[2].textContent);
                allDatesInMonth.forEach(date => {
                    const dateString = selectedDate.getFullYear() + '-' + (selectedDate.getMonth() + 1).toString().padStart(2, '0') + '-' + date.toString().padStart(2, '0');
                    if (!datesInExistingRows.includes(dateString) && new Date(dateString) <= currentDate) {
                        usersNotInAttendance.push({
                            userName: userName,
                            email: existingRowsForUser[0].cells[1].textContent,
                            date: dateString
                        });
                    }
                });
            });

            usersNotInAttendance.forEach(user => {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                <td scope="row">${user.userName}</td>
                <td scope="row">${user.email}</td>
                <td>${user.date}</td>
                <td>--</td>
                <td>--</td>
                <td>--</td>
            `;
                tbody.appendChild(newRow);
            });

            const sortedRows = Array.from(tbody.getElementsByTagName('tr')).sort((a, b) => {
                const dateA = new Date(a.cells[2].textContent);
                const dateB = new Date(b.cells[2].textContent);
                return dateA - dateB;
            });

            while (tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }

            sortedRows.forEach(row => {
                tbody.appendChild(row);
            });


            attendanceData = [];


            rows.forEach(row => {
                const userName = row.cells[0].textContent;
                const email = row.cells[1].textContent;
                const date = row.cells[2].textContent;
                const status = row.cells[6].textContent;

                const selectedMonthYear = document.getElementById('calendarInput').value;
                const selectedDate = new Date(selectedMonthYear);
                const rowDate = new Date(date);

                if (
                    rowDate.getMonth() === selectedDate.getMonth() &&
                    rowDate.getFullYear() === selectedDate.getFullYear()
                ) {
                    if (rowDate <= currentDate) {
                        row.style.display = 'table-row';
                        attendanceData.push({ userName, email, date, status });
                    } else {
                        row.style.display = 'none';
                    }
                } else {
                    row.style.display = 'none';
                }
            });

            generateAttendanceChart(attendanceData);
        }

        function resetFilter() {
            const rows = document.querySelectorAll('#userTableBody tr');
            rows.forEach(row => {
                row.style.display = 'table-row';
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const currentDate = new Date();
            const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
            const currentYear = currentDate.getFullYear().toString();

            document.getElementById('calendarInput').value = `${currentYear}-${currentMonth}`;
            document.getElementById('calendarInput').addEventListener('change', filterData);
            document.getElementById('userSelect').addEventListener('change', filterData);
            filterData();
        });




    </script>
    </script>
    <script src="/javascripts/dashboard.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
</body>

</html>
<style>
    .table-container {
        overflow-y: scroll;
        max-height: 500px;
    }

    .table-container table thead {
        position: sticky;
        top: 0;
        background-color: white;
    }

    .dropdown {
        position: relative;
        display: inline-block;
        margin-top: 30px;
        margin-left: 25px;
        margin-bottom: 26px;
    }

    .dropbtn {
        background-color: #3498db;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1;
    }

    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        cursor: pointer;
    }

    .dropdown-content a:hover {
        background-color: #ddd;
    }

    .show {
        display: block;
    }

    .input-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .styled-input {
        width: 120px;
        height: fit-content;
        margin: 10px;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        background-color: white;
        border-radius: 4px;
    }

    .userSelectBox label {
        font-weight: bold;
        margin-right: 8px;
    }

    .userSelectBox select {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        width: 200px;
        cursor: pointer;
    }



    @media screen and (max-width: 768px) {
        .details .recentOrders {
            width: 99vh;
        }
    }
</style>