<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="/assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="shortcut icon" href="/assets/images/favicon.ico" />
</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper">
            {{>sidebar}}
            <div class="main-panel">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-home"></i>
                            </span> Report
                        </h3>
                    </div>


                    <div class="row">
                        <div class="col-md-12 grid-margin stretch-card">
                            <div class="card" style="height: 600px; overflow-y: auto;">
                                <div class="card-body">
                                    <div class="form-sample">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-sm-3 col-form-label">Select Month and Year</label>
                                                    <div class="col-sm-9">
                                                        <input type="month" class="form-control" id="calendarInput"
                                                            onchange="filterData()" name="month" />
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-sm-3 col-form-label">Start Date</label>
                                                    <div class="col-sm-9">
                                                        <input class="form-control" type="date" id="startDate"
                                                            onchange="filterData1()" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-sm-3 col-form-label">End Date</label>
                                                    <div class="col-sm-9">
                                                        <input class="form-control" type="date" id="endDate"
                                                            onchange="filterData1()" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="graphBox">
                                                <div class="chart-container">
                                                    <canvas id="attendanceChart" style="height: 289px;"></canvas>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="table-responsive">
                                            <table id="userTable" class="table table-bordered">
                                                <thead class="thead-dark">
                                                    <tr>
                                                        <th scope="col">Name</th>
                                                        <th scope="col">E-mail</th>
                                                        <th scope="col">Date</th>
                                                        <th scope="col">Time</th>
                                                        <th scope="col">Type</th>
                                                        <th scope="col">Status</th>
                                                        <th scope="col">Attendance</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="userTableBody">
                                                    {{#each rows}}
                                                    <tr>
                                                        <td scope="row">{{this.user_name}}</td>
                                                        <td scope="row">{{this.email}}</td>
                                                        <td>{{this.date_column}}</td>
                                                        <td>{{this.time_column}}</td>
                                                        <td>{{this.A_type}}</td>
                                                        <td>{{this.range_status}}</td>
                                                        <td>{{this.attendance_mark}}</td>
                                                    </tr>
                                                    {{/each}}
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    </form>

                                </div>
                            </div>
                        </div>
                    </div>


                </div>

            </div>
        </div>
    </div>
    <script src="/assets/js/jquery-2.1.1.min.js"></script>
    <script src="/assets/js/face-api.js"></script>
    <script src="/assets/js/faceSystem2.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="/assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="/assets/vendors/chart.js/Chart.min.js"></script>
    <script src="/assets/js/jquery.cookie.js" type="text/javascript"></script>
    <script src="/assets/js/off-canvas.js"></script>
    <script src="/assets/js/hoverable-collapse.js"></script>
    <script src="/assets/js/misc.js"></script>
    <script src="/assets/js/dashboard.js"></script>
    <script src="/assets/js/todolist.js"></script>
</body>
<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
</body>
</html>

<style>
    .calendarBox1 {
        display: inline-block;
    }

    .calendarBox1 label {

        font-weight: bold;
        margin-bottom: 5px;
    }

    .calendarBox1 input[type="date"] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
        font-size: 14px;
    }

    .calendarBox1 input[type="date"]:focus {
        border-color: #007bff;
        outline: none;
    }



    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropbtn {
        background-color: white;
        /* color: white; */
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.875rem;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 200px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1;
    }

    .user-option {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        display: flex;
        flex-direction: column;
    }

    .user-name {
        font-weight: bold;
    }

    .user-email {
        font-size: 0.8em;
        color: #777;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }
</style>

<script>

    document.getElementById('calendarInput').addEventListener('change', filterData);


    let attendanceData = [];

    let chartInstance = null;


    function generateAttendanceChart(data) {
        const ctx = document.getElementById('attendanceChart').getContext('2d');

        if (chartInstance) {
            chartInstance.destroy();
        }


        const userNames = [...new Set(data.map(user => user.userName))];

        const attendanceCounts = userNames.map(userName => ({
            userName: userName,
            absentCount: data.filter(user => user.userName === userName && user.status === 'Absent').length,
            presentCount: data.filter(user => user.userName === userName && user.status === 'Present').length,
            halfDayCount: data.filter(user => user.userName === userName && user.status === 'Halfday').length,
        }));

        const totalDays = data.length / userNames.length;

        const selectedMonthYear = document.getElementById('calendarInput').value;
        const selectedDate = new Date(selectedMonthYear);
        const lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();
        const totalDaysInMonth = lastDay;

        const datasets = userNames.map(userName => {
            const userData = attendanceCounts.find(item => item.userName === userName);
            const absentPercentage = (userData.absentCount / totalDaysInMonth * 100).toFixed(2);
            const presentPercentage = (userData.presentCount / totalDaysInMonth * 100).toFixed(2);
            const halfDayPercentage = (userData.halfDayCount / totalDaysInMonth * 100).toFixed(2);

            return {
                label: userName,
                data: [absentPercentage, presentPercentage, halfDayPercentage],
                backgroundColor: getRandomColor(),
            };
        });
        const options = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true,
                    beginAtZero: true,
                    ticks: {
                        callback: function (value) {
                            return value + '%';
                        },
                    },
                },
            },
        };



        chartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Absent', 'Present', 'Halfday'],
                datasets: datasets,
            },
            options: options,
        });
    }




    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }



    function filterData() {

        const selectedMonthYear = document.getElementById('calendarInput').value;
        const selectedDate = new Date(selectedMonthYear);
        const currentDate = new Date();

        const lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();

        const allDatesInMonth = Array.from({ length: lastDay }, (_, i) => i + 1);



        const rows = document.querySelectorAll('#userTableBody tr');

        rows.forEach(row => {
            const userName = row.cells[0].textContent;
            const dateCell = row.cells[2].textContent;
            const rowDate = new Date(dateCell);

            if (rowDate.getMonth() === selectedDate.getMonth() && rowDate.getFullYear() === selectedDate.getFullYear()) {
                if (rowDate <= currentDate && userName !== 'Name') {
                    row.style.display = 'table-row';
                } else {
                    row.style.display = 'none';
                }
            } else {
                row.style.display = 'none';
            }
        });




        const tbody = document.getElementById('userTableBody');
        allDatesInMonth.forEach(date => {
            const dateString = selectedDate.getFullYear() + '-' + (selectedDate.getMonth() + 1).toString().padStart(2, '0') + '-' + date.toString().padStart(2, '0');
            const existingRow = Array.from(tbody.getElementsByTagName('tr')).find(row => row.cells[1].textContent === dateString);
            if (!existingRow && new Date(dateString) <= currentDate) {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td scope="row" style="display:none">N/A</td>
                    <td scope="row" style="display:none">N/A</td>
                    <td style="display:none">${dateString}</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">N/A</td>
                    <td style="display:none">Absent</td>
                `;
            }
        });

        const usersInTable = new Set();
        rows.forEach(row => {
            const userName = row.cells[0].textContent;
            usersInTable.add(userName);
        });

        const usersNotInAttendance = [];
        usersInTable.forEach(userName => {
            const existingRowsForUser = Array.from(tbody.getElementsByTagName('tr')).filter(row => row.cells[0].textContent === userName);
            const datesInExistingRows = existingRowsForUser.map(row => row.cells[2].textContent);
            allDatesInMonth.forEach(date => {
                const dateString = selectedDate.getFullYear() + '-' + (selectedDate.getMonth() + 1).toString().padStart(2, '0') + '-' + date.toString().padStart(2, '0');
                if (!datesInExistingRows.includes(dateString) && new Date(dateString) <= currentDate) {
                    usersNotInAttendance.push({
                        userName: userName,
                        email: existingRowsForUser[0].cells[1].textContent,
                        date: dateString
                    });
                }
            });
        });

        usersNotInAttendance.forEach(user => {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td scope="row">${user.userName}</td>
                <td scope="row" style="display:none">${user.email}</td>
                <td>${user.date}</td>
                <td>--</td>
                <td>--</td>
                <td>--</td>
                <td>Absent</td>
                <td>--</td>
            `;
            tbody.appendChild(newRow);
        });

        const sortedRows = Array.from(tbody.getElementsByTagName('tr')).sort((a, b) => {
            const dateA = new Date(a.cells[2].textContent);
            const dateB = new Date(b.cells[2].textContent);
            return dateA - dateB;
        });

        while (tbody.firstChild) {
            tbody.removeChild(tbody.firstChild);
        }

        sortedRows.forEach(row => {
            tbody.appendChild(row);
        });


        attendanceData = [];


        rows.forEach(row => {
            const userName = row.cells[0].textContent;
            const email = row.cells[1].textContent;
            const date = row.cells[2].textContent;
            const status = row.cells[6].textContent;

            const selectedMonthYear = document.getElementById('calendarInput').value;
            const selectedDate = new Date(selectedMonthYear);
            const rowDate = new Date(date);

            if (
                rowDate.getMonth() === selectedDate.getMonth() &&
                rowDate.getFullYear() === selectedDate.getFullYear()
            ) {
                if (rowDate <= currentDate) {
                    row.style.display = 'table-row';
                    attendanceData.push({ userName, email, date, status });
                } else {
                    row.style.display = 'none';
                }
            } else {
                row.style.display = 'none';
            }
        });

        generateAttendanceChart(attendanceData);
    }

    function resetFilter() {
        const rows = document.querySelectorAll('#userTableBody tr');
        rows.forEach(row => {
            row.style.display = 'table-row';
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const currentDate = new Date();
        const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const currentYear = currentDate.getFullYear().toString();

        const calendarInput = document.getElementById('calendarInput');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        calendarInput.value = `${currentYear}-${currentMonth}`;
        syncStartEndDates(calendarInput.value);

        calendarInput.addEventListener('change', function () {
            syncStartEndDates(calendarInput.value);
            filterData();
        });

        function syncStartEndDates(selectedMonthYear) {
            const selectedDate = new Date(selectedMonthYear);
            const lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();

            const startDay = 1;
            const endDay = lastDay;

            const startDateValue = `${selectedDate.getFullYear()}-${(selectedDate.getMonth() + 1).toString().padStart(2, '0')}-${startDay.toString().padStart(2, '0')}`;
            const endDateValue = `${selectedDate.getFullYear()}-${(selectedDate.getMonth() + 1).toString().padStart(2, '0')}-${endDay.toString().padStart(2, '0')}`;

            startDateInput.value = startDateValue;
            endDateInput.value = endDateValue;
        }

        filterData();
    });



    function filterData1() {
        const startDateString = document.getElementById('startDate').value;
        const endDateString = document.getElementById('endDate').value;

        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);

        const rows = document.querySelectorAll('#userTableBody tr');

        rows.forEach(row => {
            const dateCell = row.cells[2].textContent;
            const rowDate = new Date(dateCell);

            if (rowDate >= startDate && rowDate <= endDate) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });

        const filteredData = attendanceData.filter(entry => {
            const entryDate = new Date(entry.date);
            return entryDate >= startDate && entryDate <= endDate;
        });

        generateAttendanceChart(filteredData);
    }





    function filterData2() {
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const currentDay = currentDate.getDate().toString().padStart(2, '0');

        const presentDateString = `${currentMonth}-${currentDay}-${currentYear}`;

        const rows = document.querySelectorAll('#userTableBody tr');

        rows.forEach(row => {
            const dateCell = row.cells[2].textContent;
            const rowDate = new Date(dateCell);

            if (
                rowDate.getFullYear() === currentDate.getFullYear() &&
                rowDate.getMonth() === currentDate.getMonth() &&
                rowDate.getDate() === currentDate.getDate()
            ) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });

        const filteredData = Array.from(rows).map(row => {
            return {
                userName: row.cells[0].textContent,
                email: row.cells[1].textContent,
                date: row.cells[2].textContent,
                status: row.cells[6].textContent
            };
        });

        generateAttendanceChart(filteredData);
    }



    document.addEventListener('DOMContentLoaded', function () {
        const currentDate = new Date();
        const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const currentYear = currentDate.getFullYear().toString();

        document.getElementById('startDate').value = `${currentYear}-${currentMonth}-01`;
        const endDateInput = document.getElementById('endDate');
        endDateInput.value = `${currentYear}-${currentMonth}-${currentDate.getDate().toString().padStart(2, '0')}`;

        filterData1();
        filterData2();
    });



</script>