<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/javascripts/usermanagment.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="shortcut icon" href="assets/images/favicon.ico" />
    <meta name="viewport" content=" width=" 1024", initial-scale=1, user-scalable=yes">

</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper">
            {{>sidebar}}
            <div class="main-panel">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-arrow-left" onclick="goBack()" title="Back"></i>
                                <script>
                                    function goBack() {
                                        window.history.back();
                                    }
                                </script>
                            </span> Leave List
                        </h3>
                        <nav aria-label="breadcrumb">
                            <ul class="breadcrumb">
                                <a href="" id="downloadExcel"><i style="font-size: 30px;"
                                        class="fa-solid fa-file-csv"></i></a>
                            </ul>
                        </nav>

                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">Select Month and Year</label>
                                <div class="col-sm-9">
                                    <input type="month" class="form-control" id="calendarInput" onchange="filterData()"
                                        name="month" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">Filter by Status</label>
                                <div class="col-sm-9">
                                    <select id="statusFilter" class="form-select">
                                        <option value="all">All</option>
                                        <option value="Approve">Approve</option>
                                        <option value="Reject">Reject</option>
                                        <option value="pending">Pending</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">Start Date</label>
                                <div class="col-sm-9">
                                    <input class="form-control" type="date" id="startDate" onchange="filterData1()" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label class="col-sm-3 col-form-label">End Date</label>
                                <div class="col-sm-9">
                                    <input class="form-control" type="date" id="endDate" onchange="filterData1()" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 grid-margin stretch-card">
                            <div class="card">

                                <div class="card-body">

                                    <div class="table-wrapper">

                                        <table id="userDataTable" class="table table-striped">
                                            <thead>
                                                <tr>
                                                    {{!-- <th scope="col">ID</th> --}}
                                                    <th scope="col">User</th>
                                                    <th scope="col">Leave Start Date</th>
                                                    <th scope="col">Leave End Date</th>
                                                    <th scope="col">Days</th>
                                                    <th scope="col">Remarks</th>
                                                    <th scope="col">Leave Type</th>
                                                    <th scope="col">Status</th>
                                                    <th hidden scope="col" class="text-center">Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {{#each leaveData}}
                                                <tr>
                                                    <td>{{capitalizeFirst userpk}}</td>
                                                    <td>{{capitalizeFirst from_date}}</td>
                                                    <td>{{capitalizeFirst to_date}}</td>
                                                    <td>{{capitalizeFirst days}}</td>
                                                    <td>{{capitalizeFirst remarks}}</td>
                                                    <td>{{capitalizeFirst leave_type}}</td>
                                                    <td>{{capitalizeFirst approve_b}}</td>
                                                    <td hidden class="text-center">
                                                        <a href="/leaveApproval/{{ id }}"
                                                            class="btn btn-success">Action</a>

                                                    </td>
                                                </tr>
                                                {{/each}}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <script src="assets/vendors/js/vendor.bundle.base.js"></script>
        <script src="assets/vendors/chart.js/Chart.min.js"></script>
        <script src="assets/js/jquery.cookie.js" type="text/javascript"></script>
        <script src="assets/js/off-canvas.js"></script>
        <script src="assets/js/hoverable-collapse.js"></script>
        <script src="assets/js/misc.js"></script>
        <script src="assets/js/dashboard.js"></script>
        <script src="assets/js/todolist.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>

</body>

</html>
<style>
    .table thead th {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 2;
    }

    .table-wrapper {
        max-height: 500px;
        overflow-y: auto;
    }
</style>




<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const userDataTable = document.getElementById("userDataTable");
        const tableRows = userDataTable.querySelectorAll("tbody tr");

        searchInput.addEventListener("input", function () {
            const searchValue = searchInput.value.trim().toLowerCase();

            tableRows.forEach((row) => {
                const username = row.querySelector("td:first-child").textContent.toLowerCase();

                if (username.includes(searchValue)) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        });
    });



    document.addEventListener('DOMContentLoaded', function () {
        const tableRows = document.querySelectorAll('#userDataTable tbody tr');

        tableRows.forEach(row => {
            const cells = row.cells;

            for (let i = 0; i < cells.length - 1; i++) {
                if (cells[i].textContent.trim() === '') {
                    cells[i].textContent = 'Pending';
                }
            }

            const toDateCell = row.querySelector('td:nth-child(3)');
            const toDate = new Date(toDateCell.textContent.trim());
            const currentDate = new Date();

            const approvalCell = row.querySelector('td:nth-child(7)');
            const approvalStatus = approvalCell.textContent.trim().toLowerCase();

            if (toDate < currentDate) {
                const approveButton = row.querySelector('td:nth-child(8) a');
                approveButton.style.display = 'none';
            }

            if (approvalStatus === 'y') {
                approvalCell.textContent = 'Approve';
            } else if (approvalStatus === 'n') {
                approvalCell.textContent = 'Reject';
            }
        });

        const statusFilter = document.getElementById('statusFilter');

        statusFilter.addEventListener('change', () => {
            const selectedStatus = statusFilter.value;

            tableRows.forEach(row => {
                const statusCell = row.querySelector('td:nth-child(7)');
                const approvalStatus = statusCell.textContent.trim().toLowerCase();

                if (selectedStatus === 'all') {
                    row.style.display = 'table-row';
                } else if (selectedStatus === 'pending') {
                    if (approvalStatus.includes('pending')) {
                        row.style.display = 'table-row';
                    } else {
                        row.style.display = 'none';
                    }
                } else if (approvalStatus === selectedStatus.toLowerCase()) {
                    row.style.display = 'table-row';
                } else {
                    row.style.display = 'none';
                }
            });
        });
    });
</script>

<script>
    function searchTable() {
        // Get the search input value
        var input = document.getElementById("searchInput");
        var filter = input.value.toLowerCase();

        // Get the table and table rows
        var table = document.getElementById("userDataTable");
        var rows = table.getElementsByTagName("tr");

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getElementsByTagName("td");
            var rowText = "";

            for (var j = 0; j < cells.length; j++) {
                rowText += cells[j].textContent.toLowerCase();
            }

            if (rowText.includes(filter)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    }

</script>

<script>
    function setCurrentMonthAndDate() {
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');

        const firstDay = new Date(year, currentDate.getMonth(), 1);
        const firstDayFormatted = `${year}-${month}-01`;

        const lastDay = new Date(year, currentDate.getMonth() + 1, 0);
        const lastDayFormatted = `${year}-${month}-${lastDay.getDate().toString().padStart(2, '0')}`;

        const currentMonthYear = `${year}-${month}`;
        document.getElementById('calendarInput').value = currentMonthYear;
        document.getElementById('startDate').value = firstDayFormatted;
        document.getElementById('endDate').value = lastDayFormatted;

        filterData1();
        filterData2(); // Call the updated filterData2
    }

    window.onload = function () {
        setCurrentMonthAndDate();
        filterData2(); // Call the updated filterData2 on page load
    };

    document.getElementById('calendarInput').addEventListener('change', function () {
        const selectedDate = new Date(this.value);
        const year = selectedDate.getFullYear();
        const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
        const firstDay = new Date(year, selectedDate.getMonth(), 1);
        const firstDayFormatted = `${year}-${month}-01`;
        const lastDay = new Date(year, selectedDate.getMonth() + 1, 0);
        const lastDayFormatted = `${year}-${month}-${lastDay.getDate().toString().padStart(2, '0')}`;

        document.getElementById('startDate').value = firstDayFormatted;
        document.getElementById('endDate').value = lastDayFormatted;
        filterData1();
        filterData2(); // Call the updated filterData2 when the calendar input changes
    });

    function filterData1() {
        const startDateString = document.getElementById('startDate').value;
        const endDateString = document.getElementById('endDate').value;

        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);

        const rows = document.querySelectorAll('#userDataTable tbody tr');

        rows.forEach(row => {
            const dateCell = row.cells[2].textContent;
            const rowDate = new Date(dateCell);

            if (rowDate >= startDate && rowDate <= endDate) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function filterData2() {
        const selectedUserName = document.getElementById('user_name').value;
        const selectedMonthYear = document.getElementById('calendarInput').value;

        const rows = document.querySelectorAll('#userDataTable tbody tr');

        rows.forEach(row => {
            const userName = row.cells[0].textContent; // Change the index to 0 for the user cell
            const dateCell = row.cells[1].textContent; // Change the index to 1 for the date cell

            if (
                (selectedUserName === "" || userName === selectedUserName) &&
                (selectedMonthYear === "" || dateCell.startsWith(selectedMonthYear))
            ) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }

</script>

<script>
    document.getElementById('downloadExcel').addEventListener('click', function () {
        const table = document.getElementById('userDataTable');
        const rows = table.querySelectorAll('tbody tr');
        const filteredData = [];

        rows.forEach(row => {
            const rowData = Array.from(row.cells).map(cell => cell.textContent);
            filteredData.push(rowData);
        });

        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([['User', 'From Date', 'To Date', 'Days', 'Remarks', 'Leave Type', 'Status'], ...filteredData]);
        XLSX.utils.book_append_sheet(wb, ws, 'Report');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

        const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

        const fileName = 'report.xlsx'; // You can customize the file name here.
        if (window.navigator.msSaveOrOpenBlob) {
            // For IE/Edge browsers
            window.navigator.msSaveOrOpenBlob(blob, fileName);
        } else {
            const downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(blob);
            downloadLink.download = fileName;
            downloadLink.click();
        }
    });
</script>