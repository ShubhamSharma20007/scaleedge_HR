<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="/assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="/assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="shortcut icon" href="/assets/images/favicon.ico" />
</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper">
            {{>sidebar}}
            <div class="main-panel">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-arrow-left" onclick="goBack()" title="Back"></i>
                <script>
                  function goBack() {
                    window.history.back();
                  }
                </script>
                            </span> Import Excel
                        </h3>
                        <nav aria-label="breadcrumb" class="d-flex">
                            <ol class="breadcrumb">
                                <li class="">
                                    <a class="badge badge-success"
                                        style="text-decoration: none; font-size: medium; color: white; border-radius: 0px"
                                        href="/downloadExcel" download="sample.xlsx">Download Format</a>

                                </li>
                            </ol>
                        </nav>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <h4 class="card-title">Import Excel</h4>
                                    <form id="excelForm" method="post" action="/importExcel">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group row">
                                                    <label class="col-sm-3 col-form-label">Choose File</label>
                                                    <div class="col-sm-9">
                                                        <input class="form-control" type="file" id="excelFile"
                                                            accept=".xlsx" name="excelFile" />
                                                        <img id="imagePreview" src="#" alt="Image Preview"
                                                            style="display: none; max-width: 200px; max-height: 200px;" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <button type="button" onclick="uploadExcel()"
                                            class="btn btn-gradient-primary me-2">Import Excel</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>

    <script src="/assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="/assets/vendors/chart.js/Chart.min.js"></script>
    <script src="/assets/js/jquery.cookie.js" type="text/javascript"></script>
    <script src="/assets/js/off-canvas.js"></script>
    <script src="/assets/js/hoverable-collapse.js"></script>
    <script src="/assets/js/misc.js"></script>
    <script src="/assets/js/dashboard.js"></script>
    <script src="/assets/js/todolist.js"></script>
    <script src="/assets/js/face-api.js"></script>
</body>

</html>
<script>
    document.getElementById('downloadLink').addEventListener('click', function () {
        var filePath = '/data.xlsx';
        fetch(filePath)
            .then(response => response.blob())
            .then(blob => {
                var a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = 'data.xlsx';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            });
    });
</script>
<script>
    function goBack() {
        window.history.back();
    }

</script>
<script>
    let recognizedLabel = null;
    let jsonObj = [];
    let jsonUserObj = [];
    async function createjsonfile() {

        const MODEL_URL = '/models';
        var matchData = 0;
        await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);
        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
        await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);
        const labels = jsonObj;
        for (let i = 0; i < labels.length; i++) {
            var label = labels[i];
            const lbl = label.Imagepath;
            const lbl1 = label.title;
            const lblid = label.id;
            const imgUrl = `profile/${lbl}`;
            const img = await faceapi.fetchImage(imgUrl);
            //console.log(imgUrl);
            const singleResult = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();

            console.log(singleResult);
            if (singleResult) {
                const item = {};
                item['title'] = lbl1;
                //item['singleResult']=singleResult;
                item['descriptor'] = singleResult.descriptor;
                //   item['detection']=singleResult.detection;
                //   item['landmarks']=singleResult.landmarks;
                //   item['unshiftedLandmarks']=singleResult.unshiftedLandmarks;
                //   item['alignedRect']=singleResult.alignedRect;

                jsonUserObj.push(item);

            }

        }
        $.ajax({
            url: '/generateusersjson',
            type: 'POST',
            data: { usersjson: JSON.stringify(jsonUserObj), userfilename: 'usersdtl1.json' },
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            success: function (response) {
                console.log('IIII');
                console.log(response);
                // alert(response);
                window.location.href = "/usermangment";

            },
            error: function (err) {
                alert(err.statusText);
            }
        });

        // alert('done');

    }
    async function createjsonfile1() {

        const MODEL_URL = '/models';
        var matchData = 0;
        await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);
        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
        await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);
        const labels = jsonObj;
        for (let i = 0; i < labels.length; i++) {
            var label = labels[i];
            const lbl = label.Imagepath;
            const lbl1 = label.title;
            const lblid = label.id;
            const imgUrl = `profile/${lbl}`;
            const img = await faceapi.fetchImage(imgUrl);
            //console.log(imgUrl);
            const singleResult = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();

            //console.log(singleResult);
            if (singleResult) {
                const item = {};
                item['title'] = lbl1;
                //item['singleResult']=singleResult;
                item['descriptor'] = singleResult.descriptor;
                //   item['detection']=singleResult.detection;
                //   item['landmarks']=singleResult.landmarks;
                //   item['unshiftedLandmarks']=singleResult.unshiftedLandmarks;
                //   item['alignedRect']=singleResult.alignedRect;
                $.ajax({
                    url: '/generateusersjson',
                    type: 'POST',
                    data: { usersjson: JSON.stringify(item), userfilename: lblid + '.json' },
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    success: function (response) {
                        console.log('IIII');
                        console.log(response);
                        // alert(response);
                        window.location.href = "/usermangment";

                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
                //jsonUserObj.push(item);

            }

        }
        const params = {
            usersjson: JSON.stringify(jsonUserObj)

        };

        alert('done');
    }


    function createusersjson() {
        fetch('/getimg', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then((response) => response.json())
            .then((data) => {
                jsonObj = [];

                for (let i = 0; i < data.length; i++) {
                    const item = {};
                    item['title'] = data[i].user_id;
                    item['Imagepath'] = data[i].Imagepath;
                    item['id'] = data[i].id;
                    jsonObj.push(item);
                }

                createjsonfile();
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }
</script>
<script>
    function uploadExcel() {
        const fileInput = document.getElementById('excelFile');
        const file = fileInput.files[0];

        if (file) {
            const formData = new FormData();
            formData.append('excelFile', file);

            fetch('/importExcel', {
                method: 'POST',
                body: formData,
            })
                .then(response => response.text())
                .then(message => {
                    console.log(message);
                    alert('Data imported successfully');
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error importing data:', error);
                    alert('Error importing data');
                });
        } else {
            alert('Please select an Excel file');
        }
    }
</script>