<!DOCTYPE html>
<html>

<head>
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="/assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="shortcut icon" href="/assets/images/favicon.ico" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.8/xlsx.full.min.js"></script>


</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper">
            {{> sidebar}}
            <div class="main-panel">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-arrow-left" onclick="goBack()" title="Back"></i>
                                <script>
                                    function goBack() {
                                        window.history.back();
                                    }
                                </script>
                            </span> Report
                        </h3>
                        <nav aria-label="breadcrumb">
                            <ul class="breadcrumb">
                                <a href="#" id="downloadExcel" onclick="generateExcel()"><i style="font-size: 30px;"
                                        class="fa-solid fa-file-csv"></i></a>

                            </ul>
                        </nav>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <div class="row justify-content-center">
                                        <div class="form-sample">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <form id="dataForm" class="form-sample"
                                                        action="/reportMonthYearWise" method="post">
                                                        <div class="form-group row">
                                                            <label class="col-sm-3 col-form-label">Select Month and
                                                                Year</label>
                                                            <div class="col-sm-9">
                                                                <input type="month" class="form-control"
                                                                    id="calendarInput" onchange="submitForm()"
                                                                    name="month" />
                                                                <input type="hidden" name="selectedMonth"
                                                                    id="selectedMonth">
                                                                <input type="hidden" name="selectedYear"
                                                                    id="selectedYear">
                                                            </div>
                                                        </div>
                                                    </form>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group row">
                                                        <label class="col-sm-3 col-form-label">Select User</label>
                                                        <div class="col-sm-9">
                                                            <select class="form-select" id="user_name" name="user_name"
                                                                onchange="filterData()">
                                                                <option value=""> All Users </option>
                                                                {{#each users}}
                                                                <option value="{{user_name}}">{{user_name}}</option>
                                                                {{/each}}
                                                            </select>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group row">
                                                        <label class="col-sm-3 col-form-label">Start Date</label>
                                                        <div class="col-sm-9">
                                                            <input class="form-control" type="date" id="startDate"
                                                                onchange="filterData()" />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group row">
                                                        <label class="col-sm-3 col-form-label">End Date</label>
                                                        <div class="col-sm-9">
                                                            <input class="form-control" type="date" id="endDate"
                                                                onchange="filterData()" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="table-responsive" style="overflow-y: auto; max-height: 400px;">
                                                <table id="userTable" class="table table-bordered">
                                                    <thead style="position: sticky; top: 0; background-color: white;">
                                                        <tr>
                                                            <th scope="col">Name</th>
                                                            <th style="display: none;">E-mail</th>
                                                            <th scope="col">Date</th>
                                                            <th scope="col">In Time</th>
                                                            <th scope="col">Out Time</th>
                                                            <th scope="col">Working Hours</th>
                                                            <th scope="col">Attendance</th>
                                                            <th scope="col">Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="userTableBody">
                                                        {{#each rows}}
                                                        <tr>
                                                            <td scope="row">{{this.user_name}}</td>
                                                            <td style="display:none">{{this.email}}</td>
                                                            <td>{{this.date_column}}</td>
                                                            <td>{{this.time_in}}</td>
                                                            <td>{{this.time_out}}</td>
                                                            <td>{{this.hours_worked}}</td>
                                                            <td>{{this.attendance_mark}}</td>
                                                            <td> <a
                                                                    href="/distance?user_name={{this.user_name}}&date={{this.date_column}}"><span
                                                                        class="flag"
                                                                        style="display: inline-block; width: 16px; height: 16px;"><i
                                                                            class="fa-solid fa-flag"></i></span></a>
                                                                <a href="" hidden>{{this.range_status }}</a>
                                                            </td>
                                                        </tr>
                                                        {{/each}}
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <script src="assets/vendors/js/vendor.bundle.base.js"></script>
        <script src="assets/vendors/chart.js/Chart.min.js"></script>
        <script src="assets/js/off-canvas.js"></script>
        <script src="assets/js/hoverable-collapse.js"></script>
        <script src="assets/js/misc.js"></script>
        <script src="assets/js/dashboard.js"></script>
        <script src="assets/js/todolist.js"></script>
        <script src="/assets/js/jquery-2.1.1.min.js"></script>
</body>

</html>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
{{!--
<script>
    function filterData1() {
        var startDate = new Date(document.getElementById("startDate").value);
        var endDate = new Date(document.getElementById("endDate").value);

        var tableRows = document.getElementById("userTableBody").getElementsByTagName("tr");

        for (var i = 0; i < tableRows.length; i++) {
            var date = new Date(tableRows[i].getElementsByTagName("td")[2].textContent);

            if (date >= startDate && date <= endDate) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }
    }

</script>

<script>
    $(document).ready(function () {
        // Get the last row's date from the table
        var lastRow = $('#userTableBody tr:last-child');
        var lastDate = lastRow.find('td:nth-child(3)').text();

        // Extract the year and month from the date
        var year = lastDate.split('-')[0];
        var month = lastDate.split('-')[1];

        // Set the year and month in the calendarInput
        $('#calendarInput').val(year + '-' + month);

        // You can further trigger the filterData() function here if needed
        // filterData();
    });

    $(document).ready(function () {
        // Get the first and last row's dates from the table
        var firstDateText = $('#userTableBody tr:first-child td:nth-child(3)').text();

        // Convert the firstDateText to a JavaScript Date object
        var firstDate = new Date(firstDateText);

        // Add 1 day to the firstDate
        firstDate.setDate(firstDate.getDate());

        // Format the updated firstDate as a string
        var updatedFirstDate = formatDate(firstDate);

        var lastDate = $('#userTableBody tr:last-child td:nth-child(3)').text();

        // Set the start and end dates in the startDate and endDate input fields
        $('#startDate').val(updatedFirstDate);
        $('#endDate').val(lastDate);

        // You can further trigger the filterData1() function here if needed
        // filterData1();
    });

    // Helper function to format date as "YYYY-MM-DD"
    function formatDate(date) {
        var yyyy = date.getFullYear();
        var mm = String(date.getMonth() + 1).padStart(2, '0');
        var dd = String(date.getDate()).padStart(2, '0');
        return yyyy + '-' + mm + '-' + dd;
    }


    function filterData() {
        const selectedUserName = document.getElementById('user_name').value;
        const selectedMonthYear = document.getElementById('calendarInput').value;

        const rows = document.querySelectorAll('#userTableBody tr');

        rows.forEach(row => {
            const userName = row.cells[0].textContent;
            const dateCell = row.cells[2].textContent;

            if (
                (selectedUserName === "" || userName === selectedUserName) &&
                (selectedMonthYear === "" || dateCell.startsWith(selectedMonthYear))
            ) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }

    // Modify the event listeners
    document.getElementById('calendarInput').addEventListener('change', filterData);
    document.getElementById('user_name').addEventListener('change', filterData);


    function filterData2() {
        const selectedUserName = document.getElementById('user_name').value;
        const selectedMonthYear = document.getElementById('calendarInput').value;

        const rows = document.querySelectorAll('#userTableBody tr');

        rows.forEach(row => {
            const userName = row.cells[0].textContent;
            const dateCell = row.cells[2].textContent;

            if (
                (selectedUserName === "" || userName === selectedUserName) &&
                (selectedMonthYear === "" || dateCell.startsWith(selectedMonthYear))
            ) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    }
</script> --}}
<script>
    // Function to extract month and year from the table date
    function extractMonthYearFromDate(date) {
        const parsedDate = new Date(date);
        const year = parsedDate.getFullYear();
        let month = parsedDate.getMonth() + 1;
        if (month < 10) {
            month = '0' + month; // Adding leading zero for single-digit months
        }
        return year + '-' + month; // Format: YYYY-MM
    }

    // Function to set the value of calendarInput based on table date
    function setCalendarInputValue() {
        const tableRows = document.querySelectorAll('#userTableBody tr');
        if (tableRows.length > 0) {
            const firstRowDate = tableRows[0].querySelector('td:nth-child(3)').textContent; // Assuming the date is in the third column
            const monthYear = extractMonthYearFromDate(firstRowDate);
            document.getElementById('calendarInput').value = monthYear;
        }
    }

    // Function to get the first date of the month
    function getFirstDateOfMonth(monthYear) {
        return monthYear + '-01';
    }

    // Function to get the last date of the month
    function getLastDateOfMonth(monthYear) {
        const [year, month] = monthYear.split('-');
        const lastDate = new Date(year, month, 0).getDate();
        return monthYear + '-' + lastDate;
    }

    // Function to set the value of Start Date and End Date inputs
    function setStartEndDateValues() {
        const calendarInputValue = document.getElementById('calendarInput').value;
        const firstDate = getFirstDateOfMonth(calendarInputValue);
        const lastDate = getLastDateOfMonth(calendarInputValue);
        document.getElementById('startDate').value = firstDate;
        document.getElementById('endDate').value = lastDate;
    }

    // Call setCalendarInputValue and setStartEndDateValues functions when the document is loaded
    document.addEventListener('DOMContentLoaded', function () {
        setCalendarInputValue();
        setStartEndDateValues();
    });
</script>
<script>
    function filterData2() {
        const selectedUser = document.getElementById('user_name').value;
        const tableRows = document.querySelectorAll('#userTableBody tr');
        tableRows.forEach(row => {
            const userName = row.querySelector('td:first-child').textContent;
            if (selectedUser === '' || userName === selectedUser) {
                row.style.display = ''; // Show the row
            } else {
                row.style.display = 'none'; // Hide the row
            }
        });
    }
    function filterData1() {
        const startDate = new Date(document.getElementById('startDate').value);
        const endDate = new Date(document.getElementById('endDate').value);
        const tableRows = document.querySelectorAll('#userTableBody tr');
        tableRows.forEach(row => {
            const dateColumn = new Date(row.querySelector('td:nth-child(3)').textContent);
            if ((isNaN(startDate) || dateColumn >= startDate) && (isNaN(endDate) || dateColumn <= endDate)) {
                row.style.display = ''; // Show the row
            } else {
                row.style.display = 'none'; // Hide the row
            }
        });
    }

 // Function to store selected user_name in localStorage
    function saveSelectedUser() {
        const selectedUser = document.getElementById('user_name').value;
        localStorage.setItem('selectedUser', selectedUser);
    }

    // Function to load selected user_name from localStorage
    function loadSelectedUser() {
        const selectedUser = localStorage.getItem('selectedUser');
        if (selectedUser) {
            document.getElementById('user_name').value = selectedUser;
        }
    }

    // Function to filter table data based on selected user_name
    function filterData() {
        const selectedUser = document.getElementById('user_name').value;
        const startDate = new Date(document.getElementById('startDate').value);
        const endDate = new Date(document.getElementById('endDate').value);
        const tableRows = document.querySelectorAll('#userTableBody tr');
        tableRows.forEach(row => {
            const userName = row.querySelector('td:first-child').textContent;
            const dateColumn = new Date(row.querySelector('td:nth-child(3)').textContent);
            if ((selectedUser === '' || userName === selectedUser) &&
                ((isNaN(startDate) || dateColumn >= startDate) && (isNaN(endDate) || dateColumn <= endDate))) {
                row.style.display = ''; // Show the row
            } else {
                row.style.display = 'none'; // Hide the row
            }
        });
    }

    // Function to populate user_name select option and filter table data on page load
    window.onload = function() {
        loadSelectedUser(); // Load selected user_name from localStorage
        filterData(); // Filter table data based on selected user_name
    };

    // Add event listener to user_name select to save selected user_name in localStorage
    document.getElementById('user_name').addEventListener('change', saveSelectedUser);

    function generateExcel() {
        // Extracting filtered data from the table
        const filteredData = [];
        document.querySelectorAll('#userTable tbody tr').forEach(row => {
            if (row.style.display !== 'none') {
                const rowData = [];
                row.querySelectorAll('td').forEach((cell, index) => {
                    // Exclude the second column (email) and the last column (Status)
                    if (index !== 1 && index !== row.cells.length - 1) {
                        rowData.push(cell.textContent);
                    }
                });
                filteredData.push(rowData);
            }
        });

        // Creating workbook and worksheet
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([['Name', 'Date', 'In Time', 'Out Time', 'Working Hours', 'Attendance'], ...filteredData]);
        XLSX.utils.book_append_sheet(wb, ws, 'Report');

        // Convert workbook to Excel format
        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

        // Create Blob and trigger download
        const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const fileName = `report.xlsx`;
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(blob);
        downloadLink.download = fileName;
        downloadLink.click();
    }

</script>

<style>
    #container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #video {
        margin-bottom: 10px;
        border-radius: 100%;
        max-width: 100%;
        height: auto;
    }

    #btn {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        margin-top: 10px;
    }

    .button-20 {
        appearance: button;
        background-color: white;
        background-image: linear-gradient(180deg, rgba(255, 255, 255, .15), rgba(255, 255, 255, 0));
        border: 1px solid #4D4AE8;
        border-radius: 1rem;
        box-shadow: rgba(255, 255, 255, 0.15) 0 1px 0 inset, rgba(46, 54, 80, 0.075) 0 1px 1px;
        box-sizing: border-box;
        color: black;
        cursor: pointer;
        display: inline-block;
        font-family: Inter, sans-serif;
        font-size: 1.3rem;
        font-weight: 500;
        line-height: 1.5;
        margin: 0;
        padding: .5rem 1rem;
        text-align: center;
        text-transform: none;
        transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
        flex: 0 0 auto;
    }

    .button-20:focus:not(:focus-visible),
    .button-20:focus {
        outline: 0;
    }

    .button-20:hover {
        background-color: skyblue;
        border-color: skyblue;
    }

    .button-20:focus {
        background-color: skyblue;
        border-color: skyblue;
        box-shadow: rgba(255, 255, 255, 0.15) 0 1px 0 inset, rgba(46, 54, 80, 0.075) 0 1px 1px, rgba(104, 101, 235, 0.5) 0 0 0 .2rem;
    }

    .button-20:active {
        background-color: skyblue;
        background-image: none;
        border-color: skyblue;
        box-shadow: rgba(46, 54, 80, 0.125) 0 3px 5px inset;
    }

    .button-20:active:focus {
        box-shadow: rgba(46, 54, 80, 0.125) 0 3px 5px inset, rgba(104, 101, 235, 0.5) 0 0 0 .2rem;
    }

    .button-20:disabled {
        background-image: none;
        box-shadow: none;
        opacity: .65;
        pointer-events: none;
    }

    @media (max-width: 768px) {
        #container {
            max-width: 90%;
        }

        .button-20 {
            font-size: 2.5rem;
        }
    }
</style>

<style>
    .calendarBox1 {
        display: inline-block;
    }

    .calendarBox1 label {

        font-weight: bold;
        margin-bottom: 5px;
    }

    .calendarBox1 input[type="date"] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
        font-size: 14px;
    }

    .calendarBox1 input[type="date"]:focus {
        border-color: #007bff;
        outline: none;
    }



    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropbtn {
        background-color: white;
        /* color: white; */
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.875rem;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 200px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1;
    }

    .user-option {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        display: flex;
        flex-direction: column;
    }

    .user-name {
        font-weight: bold;
    }

    .user-email {
        font-size: 0.8em;
        color: #777;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }
</style>

<script>
    const tableColors = ['table-primary', 'table-success', 'table-danger', 'table-warning', 'table-info'];

    const tableBody = document.getElementById('userTableBody');
    const rows = tableBody.getElementsByTagName('tr');

    for (let i = 0; i < rows.length; i++) {
        const randomColor = tableColors[Math.floor(Math.random() * tableColors.length)];
        rows[i].classList.add(randomColor);
    }
</script>


{{!--
<script>
    document.getElementById('downloadExcel').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the default behavior of the click event

        const selectedMonthYear = document.getElementById('calendarInput').value;

        const rows = document.querySelectorAll('#userTableBody tr');
        const filteredData = [];

        rows.forEach(row => {
            const dateCell = row.cells[2].textContent;
            if (dateCell.startsWith(selectedMonthYear)) {
                const rowData = Array.from(row.cells).map(cell => cell.textContent);
                rowData.splice(1, 1);
                filteredData.push(rowData);
            }
        });

        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([['Name', 'Date', 'In Time', 'Out Time', 'Working Hours', 'Attendance', 'Status'], ...filteredData]);
        XLSX.utils.book_append_sheet(wb, ws, 'Report');

        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

        const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

        const fileName = `report_${selectedMonthYear}.xlsx`;
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(blob);
        downloadLink.download = fileName;
        downloadLink.click();
    });
</script> --}}

<style>
    .flag {
        display: inline-block;
        width: 16px;
        height: 16px;
    }

    .green-flag {
        color: green;
    }

    .red-flag {
        color: red;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var searchInput = document.getElementById('searchInput');
        var userTableBody = document.getElementById('userTableBody');

        searchInput.addEventListener('input', function () {
            var searchValue = searchInput.value.toLowerCase();
            var rows = userTableBody.getElementsByTagName('tr');

            for (var i = 0; i < rows.length; i++) {
                var usernameColumn = rows[i].getElementsByTagName('td')[0];
                if (usernameColumn) {
                    var username = usernameColumn.textContent || usernameColumn.innerText;
                    var displayStyle = (username.toLowerCase().indexOf(searchValue) > -1) ? '' : 'none';
                    rows[i].style.display = displayStyle;
                }
            }
        });
    });
</script>

<script>
    function submitForm() {
        // Get the selected month and year from the input
        const selectedMonthYear = document.getElementById("calendarInput").value;

        // Extract year and month from the selected value
        const selectedYear = selectedMonthYear.substring(0, 4);
        const selectedMonth = selectedMonthYear.substring(5, 7);

        // Set the values in hidden input fields (optional, but can be useful)
        document.getElementById("selectedMonth").value = selectedMonth;
        document.getElementById("selectedYear").value = selectedYear;

        // Show loader
        document.getElementById('preloader').style.display = 'flex';

        // Submit the form
        document.getElementById("dataForm").submit();
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get all the range_status <td> elements
        var rangeStatusCells = document.querySelectorAll('#userTableBody td:nth-child(8)');

        // Loop through each <td> and set the flag class based on range_status
        rangeStatusCells.forEach(function (cell) {
            var rangeStatus = cell.textContent.trim();

            if (rangeStatus === 'ok') {
                cell.querySelector('.flag').classList.add('green-flag');
            } else if (rangeStatus === 'onfield') {
                cell.querySelector('.flag').classList.add('red-flag');
            }
        });
    });
</script>
<style>
    .waviy {
        position: relative;
        -webkit-box-reflect: below -20px linear-gradient(transparent, rgba(0, 0, 0, 0.2));
    }

    .waviy span {
        position: relative;
        display: inline-block;
        font-size: 40px;
        color: #000;
        text-transform: uppercase;
        animation: waviy 1s infinite;
        animation-delay: calc(.1s * var(--i));
    }

    @keyframes waviy {

        0%,
        40%,
        100% {
            transform: translateY(0);
        }

        20% {
            transform: translateY(-20px);
        }
    }

    #preloader {
        position: fixed;
        width: 100%;
        height: 100%;
        z-index: 99999;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        top: 0;
        background-color: #fff;
    }
</style>