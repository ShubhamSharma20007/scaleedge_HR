<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>ScaleEdge</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/sweetalert/dist/sweetalert.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/javascripts/usermanagment.js"></script>
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/n.css">
    <link rel="shortcut icon" href="assets/images/favicon.ico" />
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">

    <!-- Include Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/apexcharts@5.0.0/dist/apexcharts.min.css">

    <style>
        .imagePreview {
            width: 200px;
            height: 200px;
            border: 1px solid #ccc;
            margin-bottom: 20px;
            background-size: cover;
            background-position: center;
            justify-content: center;
        }

        .swal-title {
            color: #333;
            font-size: 18px;
            font-weight: bold;
        }

        .swal-content {
            color: #666;
            font-size: 16px;
        }

        .swal-button {
            padding: 10px 20px;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            margin: 5px;
        }

        .swal-popup {
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        }

        .swal-popup {
            border-radius: 10px;
            background-color: #fff;
        }



        .swal-title {
            color: #333;
            font-size: 20px;
            font-weight: bold;
        }

        .swal-button {
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            padding: 10px 20px;
        }

        .swal-footer {
            color: #666;
            font-size: 14px;
        }

        .match-email {
            font-size: 0.8em;
            color: #666;
        }

        .swal-button.confirm {
            background-color: #007bff;
            color: #fff;
        }

        .swal-button.cancel {
            background-color: #dc3545;
            color: #fff;
        }
    </style>
    <style>
        /* CSS */
        .button-70 {
            background-image: linear-gradient(#0dccea, #0d70ea);
            border: 0;
            border-radius: 4px;
            box-shadow: rgba(0, 0, 0, .3) 0 5px 15px;
            box-sizing: border-box;
            color: #fff;
            cursor: pointer;
            font-family: Montserrat, sans-serif;
            font-size: .9em;
            margin: 5px;
            padding: 10px 15px;
            text-align: center;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
        }

        .button-71 {
            background-image: linear-gradient(#ea0d69, #0dccea);
            border: 0;
            border-radius: 4px;
            box-shadow: rgba(0, 0, 0, .3) 0 5px 15px;
            box-sizing: border-box;
            color: #fff;
            cursor: pointer;
            font-family: Montserrat, sans-serif;
            font-size: .9em;
            margin: 5px;
            padding: 10px 15px;
            text-align: center;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
        }
    </style>

</head>

<body>
    <div class="container-scroller">
        {{>topbar}}
        <div class="container-fluid page-body-wrapper p-0 " style="margin-top: 70px;">
            {{>attendanceSidebar}}
            <div class="main-panel ">
                <div class="content-wrapper">
                    <div class="page-header">
                        <h3 class="page-title">
                            <span class="page-title-icon bg-gradient-primary text-white me-2">
                                <i class="mdi mdi-home"></i>
                            </span> Attendance
                        </h3>

                    </div>
                    <div class="row" id="permission" style="display: none;">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-body">
                                    <input type="file" accept="image/*;capture=camera" capture="camera" id="imageInput1"
                                        accept="image/*" hidden>
                                    <img class="imagePreview" id="imagePreview1" hidden>
                                    <!-- Add an img tag for imagePreview1 -->

                                    <div class="row justify-content-center">
                                        <div class="col-md-5">
                                            <input type="file" class="form-control" accept="image/*;capture=camera"
                                                capture="camera" id="imageInput2" accept="image/*">
                                            <img class="imagePreview img-fluid" src="/images/1.jpg" id="imagePreview2">
                                            <div class="btn d-flex justify-content-center">
                                                <button id="punch-in" class="button-70" style="display: none;">Punch
                                                    In</button>
                                                <button id="punch-out" style="display: none;" class="button-71 ">Punch
                                                    Out</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row " id="notPermission" style="display: none;">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-body text-center">
                                    <p class="text-black">"Permission denied for attendance submission due to mismatched
                                        unique id."</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>

    <script src="assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="assets/vendors/chart.js/Chart.min.js"></script>
    <script src="assets/js/jquery.cookie.js" type="text/javascript"></script>
    <script src="assets/js/off-canvas.js"></script>
    <script src="assets/js/hoverable-collapse.js"></script>
    <script src="assets/js/misc.js"></script>
    <script src="assets/js/dashboard.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="assets/js/todolist.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

</body>

</html>

<script src="/assets/js/face-api.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    window.onload = function () {
        fetch('/uniqueId', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);

                const userEmployeeId = localStorage.getItem('userUniqueId');

                if (data.employeeIds.length > 0 && userEmployeeId) {
                    const isMatched = data.employeeIds.some(employee => employee.employee_id === userEmployeeId);

                    if (isMatched) {
                        document.getElementById('permission').style.display = 'block';
                    } else {
                        document.getElementById('notPermission').style.display = 'block';
                    }
                } else {
                    alert('No data found or userEmployeeId is missing.');
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", async function () {

        const MODEL_URL = '/models';
        await Promise.all([
            faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL),
            faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
            faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),
            faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL)
        ]);

        // Function to detect faces in an image
        const detectFace = async (image) => {
            const detections = await faceapi.detectAllFaces(image).withFaceLandmarks().withFaceDescriptors();
            return detections;
        };

        // Function to compare face descriptors
        const matchFaces = async (descriptors1, descriptors2) => {
            const loginEmail = localStorage.getItem("loginemail");
            const labeledDescriptors1 = new faceapi.LabeledFaceDescriptors(loginEmail, descriptors1);
            //const labeledDescriptors1 = new faceapi.LabeledFaceDescriptors("Person 1", descriptors1);
            const labeledDescriptors2 = new faceapi.LabeledFaceDescriptors("Person 2", descriptors2);
            const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors1);
            const bestMatch = faceMatcher.findBestMatch(labeledDescriptors2.descriptors[0]);
            return bestMatch;
        };

        const imageInput1 = document.getElementById('imageInput1');
        const imagePreview1 = document.getElementById('imagePreview1');
        const imageInput2 = document.getElementById('imageInput2');
        const imagePreview2 = document.getElementById('imagePreview2');

        const imagePath = localStorage.getItem('imagePath');
        if (imagePath) {
            const image = new Image();
            image.onload = async function () {
                document.getElementById('imagePreview1').src = image.src;
                const detections = await detectFace(image);
                const descriptors = detections.map(detection => detection.descriptor);
                imageInput1.descriptors = descriptors;
            };
            image.src = `/profile/${imagePath}`;
        }


        imageInput2.addEventListener('change', async function () {
            const file = this.files[0];
            if (file) {
                showPleaseWait(); // Show loading indicator immediately
                const imageURL = URL.createObjectURL(file); // Create temporary URL for the image file
                imagePreview2.src = imageURL; // Set src attribute of img tag
                const image = await faceapi.bufferToImage(file);

                // Delayed processing to allow UI to update
                setTimeout(async () => {
                    const startTime = performance.now();
                    const detections = await detectFace(image);
                    const descriptors = detections.map(detection => detection.descriptor);
                    if (imageInput1.descriptors && descriptors) {
                        const matchStartTime = performance.now();
                        const match = await matchFaces(imageInput1.descriptors, descriptors);
                        const endTime = performance.now();
                        const matchingTime = (endTime - startTime) / 1000;
                        if (matchingTime > 10) {
                            stopPleaseWaitLoading();
                            displayTooLongMessage();
                            return;
                        }
                        const loginEmail = localStorage.getItem("loginemail");
                        if (match._label === loginEmail && match._distance < 0.51) {
                            stopPleaseWaitLoading();
                            displayMatchResult(loginEmail, matchingTime);
                            sendDataToBackend(loginEmail, matchingTime)
                        } else {
                            displayNoMatchResult();
                        }
                    }
                }, 0); // Delayed processing
            }
        });

    });

    function showPleaseWait() {
        Swal.fire({
            title: 'Please wait',
            text: 'Fetching face from the database...',
            allowOutsideClick: false,
            showCancelButton: false,
            didOpen: () => {
                Swal.showLoading();
            },
            customClass: {
                title: 'swal-title',
                content: 'swal-content',
                popup: 'swal-popup',
                confirmButton: 'swal-button'
            }
        });
    }


    function stopPleaseWaitLoading() {
        Swal.close();
    }

    // Display match result
    function displayMatchResult(loginEmail, matchingTime) {
        Swal.fire({
            icon: 'success',
            title: '🎉 Face Match Success!',
            html: `<span class="match-email">Matched with: ${loginEmail}</span>`,
            footer: `Match duration: ${matchingTime.toFixed(2)} seconds`,
            confirmButtonText: 'Great!',
            customClass: {
                popup: 'swal-popup',
                icon: 'swal-icon',
                title: 'swal-title',
                confirmButton: 'swal-button'
            }
        });
        document.getElementById("punch-in").style.display = "block";
        document.getElementById("punch-out").style.display = "block";
    }


    // Display no match result
    function displayNoMatchResult() {
        Swal.fire({
            icon: 'error',
            title: '🚫 Face Match Failed',
            text: 'Sorry, no match found for this face.',
            footer: 'Try again or match the face with your selfie.',
            confirmButtonText: 'Got it',
            customClass: {
                popup: 'swal-popup',
                icon: 'swal-icon',
                title: 'swal-title',
                confirmButton: 'swal-button'
            }
        });
        document.getElementById("punch-in").style.display = "none";
        document.getElementById("punch-out").style.display = "none";
    }

    function displayTooLongMessage() {
        Swal.fire({
            icon: 'error',
            title: '⏳ Time Limit Exceeded',
            text: 'Sorry, the process took too long. Please try again.',
            confirmButtonText: 'Got it',
            customClass: {
                title: 'swal-title',
                content: 'swal-content',
                popup: 'swal-popup',
                confirmButton: 'swal-button'
            }
        });
        document.getElementById("punch-in").style.display = "none";
        document.getElementById("punch-out").style.display = "none";
    }


    function sendDataToBackend(recognizedLabel, duration) {
        fetch('/storeData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                recognizedLabel: recognizedLabel,
                timeSpent: duration
            }),
        })
            .then(response => response.json())
            .then(data => {
                console.log('Data sent to backend:', data);
            })
            .catch(error => {
                console.error('Error sending data to backend:', error);
            });
    }

    async function punchInOrOut(actionType) {
        try {
            const faceDetailsResponse = await fetch('/getFaceDetails');
            if (!faceDetailsResponse.ok) {
                throw new Error('Error fetching face details');
            }
            const faceDetails = await faceDetailsResponse.json();
            const user_id = faceDetails.id;
            const user_email = faceDetails.user_email;
            const user_name = faceDetails.user_name;
            const latitude = faceDetails.latitude;
            const longitude = faceDetails.longitude;

            navigator.geolocation.getCurrentPosition(async function (position) {
                const currentLat = position.coords.latitude;
                const currentLon = position.coords.longitude;

                const distance = getDistance(currentLat, currentLon, latitude, longitude);

                const range_status = distance <= 0.3 ? "ok" : "onfield";

                const currentDate = new Date().toISOString().slice(0, 10);
                const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false });
                const currentHour = new Date().getHours();
                const currentMinute = new Date().getMinutes();

                let late_time = "00:00:00";
                let late_arrive = "No";

                if (currentHour === 10 && currentMinute > 15) {
                    late_arrive = "Yes";
                    late_time = `${currentHour - 10}:${currentMinute - 15}:00`;
                } else if (currentHour > 10) {
                    late_arrive = "Yes";
                    late_time = `${currentHour - 10}:${currentMinute}:00`;
                }

                let attendance_mark;
                if (actionType === "in") {
                    if (currentHour < 10) {
                        attendance_mark = "Present";
                    } else if (currentHour >= 10 && currentHour < 13) {
                        attendance_mark = "Halfday";
                    } else {
                        attendance_mark = "Absent";
                    }
                } else if (actionType === "out") {
                    if (currentHour < 10) {
                        attendance_mark = "Present";
                    } else if (currentHour >= 10 && currentHour < 13) {
                        attendance_mark = "Halfday";
                    } else {
                        attendance_mark = "Absent";
                    }
                }

                if (range_status === "onfield") {
                    const confirmationMessage = actionType === "in" ?
                        '⚠️ Are you sure you want to check-in outside?' :
                        '⚠️ Are you sure you want to check-out outside?';
                    const confirmAction = await Swal.fire({
                        title: confirmationMessage,
                        text: 'You are outside the specified location range. Do you still want to proceed?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: `Yes, ${actionType === "in" ? 'check-in' : 'check-out'}`,
                        cancelButtonText: 'No, cancel',
                        confirmButtonColor: '#007bff',
                        cancelButtonColor: '#dc3545',
                        customClass: {
                            popup: 'swal-popup',
                            icon: 'swal-icon',
                            title: 'swal-title',
                            content: 'swal-content',
                            confirmButton: 'swal-button',
                            cancelButton: 'swal-button'
                        }
                    });

                    if (confirmAction.isConfirmed) {
                        const data = {
                            user_id: user_id,
                            A_type: actionType,
                            user_lat: currentLat,
                            user_lon: currentLon,
                            date_column: currentDate,
                            time_column: currentTime,
                            range_status: range_status,
                            user_email: localStorage.loginemail,
                            user_name: user_name,
                            attendance_mark: attendance_mark,
                            late_time: late_time,
                            late_arrive: late_arrive
                        };

                        const response = await fetch(`/storePunch${actionType === "in" ? "In" : "Out"}Details`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });

                        if (response.ok) {
                            const successMessage = actionType === "in" ?
                                'Check-in Successful!' :
                                'Check-out Successful!';
                            const greetingMessage = actionType === "in" ?
                                'Welcome!' :
                                'Goodbye!';
                            Swal.fire({
                                icon: 'success',
                                title: successMessage,
                                text: `${greetingMessage} Your ${actionType === "in" ? 'check-in' : 'check-out'} has been successfully recorded`,
                                footer: `${actionType === "in" ? 'Check-in' : 'Check-out'} Time: ${currentTime}`,
                                showConfirmButton: false,
                                timer: 2500,
                                customClass: {
                                    popup: 'swal-popup',
                                    icon: 'swal-icon',
                                    title: 'swal-title',
                                    content: 'swal-content',
                                    footer: 'swal-footer'
                                }
                            }).then(() => {
                                window.location.href = '/userdashboard';
                            });
                        } else {
                            console.error(`Error inserting ${actionType === "in" ? 'check-in' : 'check-out'} attendance:`, response.statusText);
                        }
                    }
                } else {
                    const data = {
                        user_id: user_id,
                        A_type: actionType,
                        user_lat: currentLat,
                        user_lon: currentLon,
                        date_column: currentDate,
                        time_column: currentTime,
                        range_status: range_status,
                        user_email: localStorage.loginemail,
                        user_name: user_name,
                        attendance_mark: attendance_mark,
                        late_time: late_time,
                        late_arrive: late_arrive
                    };

                    const response = await fetch(`/storePunch${actionType === "in" ? "In" : "Out"}Details`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        const successMessage = actionType === "in" ?
                            'Check-in Successful!' :
                            'Check-out Successful!';
                        const greetingMessage = actionType === "in" ?
                            'Welcome!' :
                            'Goodbye!';
                        Swal.fire({
                            icon: 'success',
                            title: successMessage,
                            text: `${greetingMessage} Your ${actionType === "in" ? 'check-in' : 'check-out'} has been successfully recorded`,
                            footer: `${actionType === "in" ? 'Check-in' : 'Check-out'} Time: ${currentTime}`,
                            showConfirmButton: false,
                            timer: 2500,
                            customClass: {
                                popup: 'swal-popup',
                                icon: 'swal-icon',
                                title: 'swal-title',
                                content: 'swal-content',
                                footer: 'swal-footer'
                            }
                        }).then(() => {
                            window.location.href = '/userdashboard';
                        });
                    } else {
                        console.error(`Error inserting ${actionType === "in" ? 'check-in' : 'check-out'} attendance:`, response.statusText);
                    }
                }
            });
        } catch (error) {
            console.error('Error:', error);
        }
    }



    document.getElementById("punch-in").addEventListener("click", function () {
        punchInOrOut("in");
    });

    document.getElementById("punch-out").addEventListener("click", function () {
        punchInOrOut("out");
    });

    function getDistance(lat1, lon1, lat2, lon2) {
        const radlat1 = (Math.PI * lat1) / 180;
        const radlat2 = (Math.PI * lat2) / 180;
        const theta = lon1 - lon2;
        const radtheta = (Math.PI * theta) / 180;
        let dist =
            Math.sin(radlat1) * Math.sin(radlat2) +
            Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
        dist = Math.acos(dist);
        dist = (dist * 180) / Math.PI;
        dist = dist * 60 * 1.1515 * 1.609344;
        return dist;
    }
</script>